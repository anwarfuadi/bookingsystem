composer create-project --prefer-dist laravel/laravel bananastore "6.*"

DELIMITER $$
CREATE TRIGGER update_stock
AFTER INSERT ON order_details FOR EACH ROW
BEGIN
	UPDATE products SET stock = stock - NEW.qty
	WHERE id = NEW.product_id;
END $$
DELIMITER ;

php artisan make:model Models\Product -c -r
php artisan make:model Models\Category -c -r
php artisan make:model Models\Order -c -r
php artisan make:model Models\Customer -c -r

php artisan make:controller HomeController
php artisan make:controller UserController --model=Models\User -r

php artisan make:seed UserSeeder
php artisan db:seed

composer require barryvdh/laravel-debugbar --dev

DROP FUNCTION IF EXISTS new_cust_no;
DELIMITER $$
CREATE FUNCTION new_cust_no() RETURNS VARCHAR(10)
BEGIN
	DECLARE ai INT;
	DECLARE cust_no VARCHAR(10);
	SET ai = (SELECT AUTO_INCREMENT
		FROM information_schema.TABLES
		WHERE TABLE_SCHEMA = "bookingsystem"
		AND TABLE_NAME = "customers");
	SET cust_no = CONCAT("C",ai);
  RETURN cust_no;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS proc_customer;
DELIMITER $$
CREATE PROCEDURE proc_customer
(
	proc VARCHAR(6),
	pId INT,
	pNama VARCHAR(50),
	pAddress VARCHAR(255),
	pCity VARCHAR(50),
	pEmail VARCHAR(100),
	pHp VARCHAR(15)
)
BEGIN
	IF proc = 'ADD' THEN
		INSERT INTO customers(customer_no, customer_name, address, city, email, hp) values(new_cust_no(), pNama, pAddress, pCity, pEmail, pHp);
	ELSEIF proc = 'EDIT' THEN
		UPDATE customers SET customer_name = pNama, address = pAddress, city = pCity, email = pEmail, hp = pHp WHERE id = pId;
	ELSEIF proc = 'DELETE' THEN
		DELETE FROM customers	WHERE id = pId;
	END IF;
END$$
DELIMITER ;



DROP TRIGGER IF EXISTS insert_booking;
DELIMITER $$
CREATE TRIGGER insert_booking
AFTER INSERT
ON booking_details FOR EACH ROW
BEGIN
	DECLARE ym INT;
	SET ym = (SELECT EXTRACT(YEAR_MONTH FROM NEW.use_date));

	IF EXISTS(SELECT * FROM booking_summaries WHERE room_id=NEW.room_id AND yearmonth=ym) THEN
	BEGIN
		UPDATE booking_summaries SET book_num = book_num + 1;
	END;
	ELSE
	BEGIN
		INSERT INTO booking_summaries(room_id, yearmonth, book_num) VALUES (NEW.room_id, ym, 1);
	END;
	END IF;
END$$
DELIMITER ;


DROP VIEW IF EXISTS booking_per_bulan;
CREATE VIEW booking_per_bulan AS
SELECT
MONTHNAME(bd.use_date) AS bulan,
YEAR(bd.use_date) AS tahun,
COUNT(*) AS jml_booking
FROM booking_details bd
GROUP BY bulan, tahun;








